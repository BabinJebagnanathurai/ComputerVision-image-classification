#importing libraries

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator



# Set the path to your dataset directory
data_set = r"file location"

# Set the image dimensions and batch size
img_width, img_height = 150, 150
batch_size = 32

# Data augmentation and normalization for training
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)


# Only rescaling for validation and testing
test_datagen = ImageDataGenerator(rescale=1./255)


# Load the training data
train_generator = train_datagen.flow_from_directory(
    os.path.join(data_set, 'training'),
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')



# Load the validation data
validation_generator = test_datagen.flow_from_directory(
    os.path.join(data_set, 'validation'),
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')


# Build the CNN model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])


# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])



# Train the model
epochs = 10
model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // batch_size)



